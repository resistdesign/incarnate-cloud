[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/Providers/AWS.jsx",
    "content": "import Incarnate from 'incarnate';\nimport ParseCookies from 'cookie';\n\nconst PATH_DELIMITER = '/';\nconst METHODS = {\n  OPTIONS: 'OPTIONS'\n};\n\n/**\n * Built-in dependency names.\n * */\nexport const DEP_NAMES = {\n  INPUT: 'INPUT',\n  PACKAGES: 'PACKAGES',\n  HEADERS: 'HEADERS',\n  COOKIES: 'COOKIES',\n  PATH: 'PATH'\n};\n\n// SECURITY: Don't call private methods on services.\nconst getMethodNameIsPrivate = (methodName = '') => methodName.charAt(0) === '_';\n\nconst getCleanPathParts = (path = '') => path\n  .split(PATH_DELIMITER)\n  .filter(p => !!p);\n\nconst getResponse = (statusCode = 200, value = undefined, headers = {}) => ({\n  statusCode,\n  headers: typeof value === 'undefined' ? {...headers} : {'Content-Type': 'application/json', ...headers},\n  body: typeof value === 'undefined' ? '' : JSON.stringify(value, null, '  ')\n});\n\nconst getCORSHeaders = (clientOrigin = '') => ({\n  'Access-Control-Allow-Origin': clientOrigin,\n  'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization',\n  'Access-Control-Allow-Methods': 'OPTIONS, HEAD, GET, POST, PUT, PATCH, DELETE',\n  'Access-Control-Allow-Credentials': 'true'\n});\n\nconst getCleanHttpMethod = (method = 'POST') => `${method}`.toUpperCase();\n\n/**\n * Create an Incarnate managed Lambda handler.\n * @param {Object} incarnateConfig The incarnate configuration object.\n * @param {Array.<string>} allowedPaths A SECURITY measure to prevent access of values and methods outside of services.\n * @param {Object} allowedOrigin The allowed CORS origin return to `OPTIONS` requests.\n *\n * @returns {Function} The Lambda handler.\n * */\nexport default (incarnateConfig = {}, allowedPaths = [], allowedOrigin = '') => {\n  const corsHeaders = getCORSHeaders(allowedOrigin);\n  const getResponseWithCORS = (statusCode = 200, value = undefined, headers = {}) => {\n    return getResponse(\n      statusCode,\n      value,\n      {\n        ...corsHeaders,\n        ...headers\n      }\n    );\n  };\n\n  return async (event) => {\n    const {\n      httpMethod = 'POST',\n      headers,\n      multiValueHeaders,\n      path = '',\n      body: bodyString = '[]'\n    } = event;\n    const cleanHttpMethod = getCleanHttpMethod(httpMethod);\n\n    if (cleanHttpMethod === METHODS.OPTIONS) {\n      return getResponseWithCORS(200);\n    }\n\n    // SECURITY: IMPORTANT: Only expose allowed paths. (`/package/service/method`)\n    if (allowedPaths.indexOf(path) === -1) {\n      return getResponseWithCORS(404, {message: 'Not Found'});\n    }\n\n    const body = JSON.parse(bodyString);\n    const {\n      subMap = {}\n    } = incarnateConfig;\n    const cleanPathParts = getCleanPathParts(path);\n    const cleanPath = cleanPathParts.join(PATH_DELIMITER);\n    const inc = new Incarnate({\n      ...incarnateConfig,\n      pathDelimiter: PATH_DELIMITER,\n      subMap: {\n        [DEP_NAMES.INPUT]: {\n          subMap: {\n            [DEP_NAMES.HEADERS]: {\n              factory: () => ({\n                ...headers,\n                ...multiValueHeaders\n              })\n            },\n            [DEP_NAMES.COOKIES]: {\n              dependencies: {\n                suppliedHeaders: DEP_NAMES.HEADERS\n              },\n              factory: ({suppliedHeaders = {}} = {}) => {\n                const {Cookie: cookieString = ''} = suppliedHeaders;\n\n                return ParseCookies(cookieString);\n              }\n            },\n            [DEP_NAMES.PATH]: {\n              factory: () => cleanPath\n            }\n          }\n        },\n        [DEP_NAMES.PACKAGES]: {\n          shared: {\n            [DEP_NAMES.INPUT]: DEP_NAMES.INPUT\n          },\n          subMap\n        }\n      }\n    });\n    const [packageName, serviceName, methodName] = cleanPathParts;\n    const methodNameIsPrivate = getMethodNameIsPrivate(methodName);\n    const args = body instanceof Array ? body : [];\n\n    if (!!packageName && !!serviceName && !!methodName && !methodNameIsPrivate) {\n      const serviceInstance = (await inc.getResolvedPathAsync([\n        DEP_NAMES.PACKAGES,\n        packageName,\n        serviceName\n      ])) || {};\n      const {[methodName]: serviceMethod} = serviceInstance;\n\n      if (serviceMethod instanceof Function) {\n        try {\n          const returnValue = await serviceMethod(...args);\n\n          return getResponseWithCORS(200, returnValue);\n        } catch (error) {\n          const {message = ''} = error || {};\n\n          return getResponseWithCORS(500, {message});\n        }\n      } else {\n        return getResponseWithCORS(404, {message: 'Not Found'});\n      }\n    } else {\n      return getResponseWithCORS(404, {message: 'Not Found'});\n    }\n  };\n};\n",
    "static": true,
    "longname": "/Users/ryan/Projects/incarnate-cloud/src/Providers/AWS.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "name": "PATH_DELIMITER",
    "memberof": "src/Providers/AWS.jsx",
    "static": true,
    "longname": "src/Providers/AWS.jsx~PATH_DELIMITER",
    "access": "public",
    "export": false,
    "importPath": "incarnate-cloud/src/Providers/AWS.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2,
    "kind": "variable",
    "name": "METHODS",
    "memberof": "src/Providers/AWS.jsx",
    "static": true,
    "longname": "src/Providers/AWS.jsx~METHODS",
    "access": "public",
    "export": false,
    "importPath": "incarnate-cloud/src/Providers/AWS.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "{\"OPTIONS\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "name": "DEP_NAMES",
    "memberof": "src/Providers/AWS.jsx",
    "static": true,
    "longname": "src/Providers/AWS.jsx~DEP_NAMES",
    "access": "public",
    "export": true,
    "importPath": "incarnate-cloud/src/Providers/AWS.jsx",
    "importStyle": "{DEP_NAMES}",
    "description": "Built-in dependency names.",
    "lineNumber": 12,
    "type": {
      "types": [
        "{\"INPUT\": string, \"PACKAGES\": string, \"HEADERS\": string, \"COOKIES\": string, \"PATH\": string}"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "function",
    "name": "getMethodNameIsPrivate",
    "memberof": "src/Providers/AWS.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Providers/AWS.jsx~getMethodNameIsPrivate",
    "access": "public",
    "export": false,
    "importPath": "incarnate-cloud/src/Providers/AWS.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "methodName",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 5,
    "kind": "function",
    "name": "getCleanPathParts",
    "memberof": "src/Providers/AWS.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Providers/AWS.jsx~getCleanPathParts",
    "access": "public",
    "export": false,
    "importPath": "incarnate-cloud/src/Providers/AWS.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 6,
    "kind": "function",
    "name": "getResponse",
    "memberof": "src/Providers/AWS.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Providers/AWS.jsx~getResponse",
    "access": "public",
    "export": false,
    "importPath": "incarnate-cloud/src/Providers/AWS.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "statusCode",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 200,
        "defaultValue": "200"
      },
      {
        "name": "value",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "undefined",
        "defaultValue": "undefined"
      },
      {
        "name": "headers",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 7,
    "kind": "function",
    "name": "getCORSHeaders",
    "memberof": "src/Providers/AWS.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Providers/AWS.jsx~getCORSHeaders",
    "access": "public",
    "export": false,
    "importPath": "incarnate-cloud/src/Providers/AWS.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "clientOrigin",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 8,
    "kind": "function",
    "name": "getCleanHttpMethod",
    "memberof": "src/Providers/AWS.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Providers/AWS.jsx~getCleanHttpMethod",
    "access": "public",
    "export": false,
    "importPath": "incarnate-cloud/src/Providers/AWS.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "method",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "POST",
        "defaultValue": "POST"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 9,
    "kind": "function",
    "name": "AWS",
    "memberof": "src/Providers/AWS.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Providers/AWS.jsx~AWS",
    "access": "public",
    "export": true,
    "importPath": "incarnate-cloud/src/Providers/AWS.jsx",
    "importStyle": "AWS",
    "description": "Create an Incarnate managed Lambda handler.",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} The Lambda handler."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "incarnateConfig",
        "description": "The incarnate configuration object."
      },
      {
        "nullable": null,
        "types": [
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "allowedPaths",
        "description": "A SECURITY measure to prevent access of values and methods outside of services."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "allowedOrigin",
        "description": "The allowed CORS origin return to `OPTIONS` requests."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "The Lambda handler."
    }
  },
  {
    "__docId__": 10,
    "kind": "file",
    "name": "src/index.jsx",
    "content": "import AWSInternal from './Providers/AWS';\n\nexport const AWS = AWSInternal;\n",
    "static": true,
    "longname": "/Users/ryan/Projects/incarnate-cloud/src/index.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 11,
    "kind": "variable",
    "name": "AWS",
    "memberof": "src/index.jsx",
    "static": true,
    "longname": "src/index.jsx~AWS",
    "access": "public",
    "export": true,
    "importPath": "incarnate-cloud",
    "importStyle": "{AWS}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# Incarnate Cloud\n\nCloud Function Middleware for Incarnate\n\n## Install\n\n`npm i -S incarnate-cloud`\n\n## API Docs\n\nhttp://cloud.incarnate.resist.design\n\n## Usage\n\n```js\nimport {AWS} from 'incarnate-cloud';\n\nmodule.exports = {\n  handler: AWS(\n    {\n      subMap: {\n        package: {\n          subMap: {\n            service: {\n              factory: () => {\n                return {\n                  method: async arg1 => `Received: ${arg1}`\n                };\n              }\n            }\n          }\n        }\n      }\n    },\n    [\n      '/package/service/method'\n    ],\n    'https://example.com'\n  )\n};\n```\n",
    "longname": "/Users/ryan/Projects/incarnate-cloud/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  }
]