[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/Providers/AWS/ConfigLoader.jsx",
    "content": "/**\n * @typedef {Object} ISystemsManager\n * @property {Function} getParameter\n * */\n\n/**\n * Load named configurations from parameter storage.\n * */\nexport default class ConfigLoader {\n  static getFullPath = (basePath = '', name = '') => {\n    return `${basePath}/${name}`\n      .replace(/\\/\\//g, '/');\n  };\n\n  /**\n   * The base path for all configurations to be loaded.\n   * @type {string}\n   * */\n  basePath;\n\n  /**\n   * The Systems Manager instance.\n   * @type {ISystemsManager}\n   * */\n  ssm;\n\n  _cache = {};\n\n  constructor(config = {}) {\n    Object.assign(this, config);\n  }\n\n  /**\n   * Load a configuration by name.\n   * @param {string} name The name of the configuration.\n   * @param {boolean} useCache Use a cached value if available, and cache the value if not.\n   * @returns {string} The configuration data.\n   * */\n  loadConfig = async (name = '', useCache = true) => {\n    let configData = undefined;\n\n    if (useCache && this._cache.hasOwnProperty(name)) {\n      configData = this._cache[name];\n    } else {\n      const {\n        Parameter: {\n          Value\n        }\n      } = await this.ssm.getParameter({\n        Name: ConfigLoader.getFullPath(this.basePath, name),\n        WithDecryption: true\n      }).promise();\n      configData = Value;\n\n      if (useCache) {\n        this._cache[name] = configData;\n      }\n    }\n\n    return configData;\n  };\n\n  /**\n   * Load a configuration by name.\n   * @param {string} name The name of the configuration.\n   * @param {boolean} useCache Use a cached value if available, and cache the value if not.\n   * @returns {string} The configuration data.\n   * */\n  loadJSONConfig = async (name = '', useCache = true) => {\n    const configData = await this.loadConfig(name, useCache);\n\n    return typeof configData === 'undefined' ?\n      configData :\n      JSON.parse(configData);\n  };\n}\n",
    "static": true,
    "longname": "/Users/ryangraff/projects/incarnate-cloud/src/Providers/AWS/ConfigLoader.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "typedef",
    "name": "ISystemsManager",
    "memberof": "src/Providers/AWS/ConfigLoader.jsx",
    "static": true,
    "longname": "src/Providers/AWS/ConfigLoader.jsx~ISystemsManager",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "getParameter",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ISystemsManager"
    }
  },
  {
    "__docId__": 2,
    "kind": "class",
    "name": "ConfigLoader",
    "memberof": "src/Providers/AWS/ConfigLoader.jsx",
    "static": true,
    "longname": "src/Providers/AWS/ConfigLoader.jsx~ConfigLoader",
    "access": "public",
    "export": true,
    "importPath": "incarnate-cloud/src/Providers/AWS/ConfigLoader.jsx",
    "importStyle": "ConfigLoader",
    "description": "Load named configurations from parameter storage.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 3,
    "kind": "member",
    "name": "getFullPath",
    "memberof": "src/Providers/AWS/ConfigLoader.jsx~ConfigLoader",
    "static": true,
    "longname": "src/Providers/AWS/ConfigLoader.jsx~ConfigLoader.getFullPath",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "member",
    "name": "basePath",
    "memberof": "src/Providers/AWS/ConfigLoader.jsx~ConfigLoader",
    "static": false,
    "longname": "src/Providers/AWS/ConfigLoader.jsx~ConfigLoader#basePath",
    "access": "public",
    "description": "The base path for all configurations to be loaded.",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 5,
    "kind": "member",
    "name": "ssm",
    "memberof": "src/Providers/AWS/ConfigLoader.jsx~ConfigLoader",
    "static": false,
    "longname": "src/Providers/AWS/ConfigLoader.jsx~ConfigLoader#ssm",
    "access": "public",
    "description": "The Systems Manager instance.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "ISystemsManager"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 6,
    "kind": "member",
    "name": "_cache",
    "memberof": "src/Providers/AWS/ConfigLoader.jsx~ConfigLoader",
    "static": false,
    "longname": "src/Providers/AWS/ConfigLoader.jsx~ConfigLoader#_cache",
    "access": "private",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Providers/AWS/ConfigLoader.jsx~ConfigLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Providers/AWS/ConfigLoader.jsx~ConfigLoader#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true
  },
  {
    "__docId__": 8,
    "kind": "member",
    "name": "loadConfig",
    "memberof": "src/Providers/AWS/ConfigLoader.jsx~ConfigLoader",
    "static": false,
    "longname": "src/Providers/AWS/ConfigLoader.jsx~ConfigLoader#loadConfig",
    "access": "public",
    "description": "Load a configuration by name.",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The configuration data."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the configuration."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "useCache",
        "description": "Use a cached value if available, and cache the value if not."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The configuration data."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "member",
    "name": "loadJSONConfig",
    "memberof": "src/Providers/AWS/ConfigLoader.jsx~ConfigLoader",
    "static": false,
    "longname": "src/Providers/AWS/ConfigLoader.jsx~ConfigLoader#loadJSONConfig",
    "access": "public",
    "description": "Load a configuration by name.",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The configuration data."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the configuration."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "useCache",
        "description": "Use a cached value if available, and cache the value if not."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The configuration data."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "file",
    "name": "src/Providers/AWS.jsx",
    "content": "import {getRequestResponse} from './Common';\n\n/**\n * Create an Incarnate managed Lambda handler.\n * @param {Object} config\n * @param {Object} config.incarnateConfig The incarnate configuration object.\n * @param {Array.<string>} config.allowedPaths A SECURITY measure to prevent access of values and methods outside of services.\n * @param {string|string[]|RegExp|RegExp[]|AllowedOriginProcessor|AllowedOriginProcessor[]} config.allowedOrigin The allowed CORS origin returned to `OPTIONS` requests.\n * @param {number} config.dependencyResolutionTimeoutMS The maximum number of milliseconds allotted for resolving service dependencies. Default: 300000 (5 minutes)\n *\n * @returns {Function} The Lambda handler.\n * */\nexport default ({\n                  incarnateConfig = {},\n                  allowedPaths = [],\n                  allowedOrigin = '',\n                  dependencyResolutionTimeoutMS = 300000\n                } = {}) => {\n  return async (event = {}) => {\n    const {\n      httpMethod = 'POST',\n      headers = {},\n      multiValueHeaders = {},\n      path = '',\n      body: bodyString = '[]'\n    } = event;\n\n    return getRequestResponse({\n      incarnateConfig,\n      allowedPaths,\n      allowedOrigin,\n      dependencyResolutionTimeoutMS,\n      event,\n      httpMethod,\n      headers,\n      multiValueHeaders,\n      path,\n      bodyString\n    });\n  }\n};\n",
    "static": true,
    "longname": "/Users/ryangraff/projects/incarnate-cloud/src/Providers/AWS.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 11,
    "kind": "function",
    "name": "AWS",
    "memberof": "src/Providers/AWS.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Providers/AWS.jsx~AWS",
    "access": "public",
    "export": true,
    "importPath": "incarnate-cloud/src/Providers/AWS.jsx",
    "importStyle": "AWS",
    "description": "Create an Incarnate managed Lambda handler.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} The Lambda handler."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config.incarnateConfig",
        "description": "The incarnate configuration object."
      },
      {
        "nullable": null,
        "types": [
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "config.allowedPaths",
        "description": "A SECURITY measure to prevent access of values and methods outside of services."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "string[]",
          "RegExp",
          "RegExp[]",
          "AllowedOriginProcessor",
          "AllowedOriginProcessor[]"
        ],
        "spread": false,
        "optional": false,
        "name": "config.allowedOrigin",
        "description": "The allowed CORS origin returned to `OPTIONS` requests."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "config.dependencyResolutionTimeoutMS",
        "description": "The maximum number of milliseconds allotted for resolving service dependencies. Default: 300000 (5 minutes)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "The Lambda handler."
    }
  },
  {
    "__docId__": 12,
    "kind": "file",
    "name": "src/Providers/Common.jsx",
    "content": "import {getCleanHttpMethod, getCleanPathParts, getCORSHeaders, getMethodNameIsPrivate, getResponse} from './Utils';\nimport {DEP_NAMES, METHODS, PATH_DELIMITER} from './Constants';\nimport Incarnate, {SubMapDeclaration} from 'incarnate';\nimport ParseCookies from 'cookie';\nimport ServiceResponse from '../Utils/ServiceResponse';\nimport toCamelCase from 'lodash.camelcase';\n\n/**\n * @typedef {Function} AllowedOriginProcessor\n * @param {string} incomingOrigin The current origin of the incoming request.\n * @returns {boolean} Whether or not the `incomingOrigin` is allowed.\n * */\n\n/**\n * The generic request handler.\n * @param {Object} config The configuration object.\n * @param {Object} config.incarnateConfig The incarnate configuration object.\n * @param {Array.<string>} config.allowedPaths A SECURITY measure to prevent access of values and methods outside of services.\n * @param {string|string[]|RegExp|RegExp[]|AllowedOriginProcessor|AllowedOriginProcessor[]} config.allowedOrigin The allowed CORS origin returned to `OPTIONS` requests.\n * @param {number} config.dependencyResolutionTimeoutMS The maximum number of milliseconds allotted for resolving service dependencies. Default: 300000 (5 minutes)\n * @param {Object} config.event The raw invocation event object.\n * @param {string} config.httpMethod The HTTP method for the request. Default: POST\n * @param {Object} config.headers The HTTP headers object.\n * @param {Object} [config.multiValueHeaders] An optional map of HTTP headers with multiple values stored as Array values for each header name key.\n * @param {string} config.path The HTTP request path.\n * @param {string} config.bodyString The raw HTTP body as a string that will be parsed as JSON and expected to be an Array of arguments to the destination function.\n *\n * @returns {HandlerResponse} The handler response object.\n * */\nexport const getRequestResponse = async ({\n                                           incarnateConfig = {},\n                                           allowedPaths = [],\n                                           allowedOrigin = '',\n                                           dependencyResolutionTimeoutMS = 300000,\n                                           event = {},\n                                           httpMethod = 'POST',\n                                           headers = {},\n                                           multiValueHeaders = {},\n                                           path = '',\n                                           bodyString = '[]'\n                                         } = {}) => {\n  const incomingHeaders = {\n    ...headers,\n    ...multiValueHeaders\n  };\n  const {\n    Origin: incomingOrigin = ''\n  } = incomingHeaders;\n  const currentOrigin = incomingOrigin instanceof Array ? incomingOrigin[0] : incomingOrigin;\n  const corsHeaders = getCORSHeaders(allowedOrigin, currentOrigin);\n  const getResponseWithCORS = (statusCode = 200, value = undefined, headers = {}) => {\n    return getResponse(\n      statusCode,\n      value,\n      {\n        ...corsHeaders,\n        ...headers\n      }\n    );\n  };\n  const cleanHttpMethod = getCleanHttpMethod(httpMethod);\n\n  if (cleanHttpMethod === METHODS.OPTIONS) {\n    return getResponseWithCORS(200);\n  }\n\n  // SECURITY: IMPORTANT: Only expose allowed paths. (`/package/service/method`)\n  if (allowedPaths.indexOf(path) === -1) {\n    return getResponseWithCORS(404, {message: 'Not Found'});\n  }\n\n  const body = JSON.parse(bodyString);\n  const {\n    subMap = {}\n  } = incarnateConfig;\n  const cleanPathParts = getCleanPathParts(path);\n  const cleanPath = cleanPathParts.join(PATH_DELIMITER);\n  const inc = new Incarnate(new SubMapDeclaration({\n    ...incarnateConfig,\n    pathDelimiter: PATH_DELIMITER,\n    subMap: {\n      [DEP_NAMES.INPUT]: {\n        subMap: {\n          [DEP_NAMES.HEADERS]: {\n            factory: () => incomingHeaders\n          },\n          [DEP_NAMES.COOKIES]: {\n            dependencies: {\n              suppliedHeaders: DEP_NAMES.HEADERS\n            },\n            factory: ({suppliedHeaders = {}} = {}) => {\n              const {Cookie: cookieString = ''} = suppliedHeaders;\n\n              return ParseCookies(cookieString);\n            }\n          },\n          [DEP_NAMES.PATH]: {\n            factory: () => cleanPath\n          },\n          [DEP_NAMES.EVENT]: {\n            factory: () => event\n          },\n          [DEP_NAMES.CONTEXT]: {\n            dependencies: {\n              event: DEP_NAMES.EVENT\n            },\n            factory: ({event: {requestContext = {}} = {}} = {}) => requestContext\n          },\n          [DEP_NAMES.IDENTITY]: {\n            dependencies: {\n              context: DEP_NAMES.CONTEXT\n            },\n            factory: ({context: {identity = {}} = {}} = {}) => identity\n          }\n        }\n      },\n      [DEP_NAMES.PACKAGES]: {\n        shared: {\n          [DEP_NAMES.INPUT]: DEP_NAMES.INPUT\n        },\n        subMap\n      }\n    }\n  }));\n  const [packageName, serviceName, methodName] = cleanPathParts;\n  const methodNameIsPrivate = getMethodNameIsPrivate(methodName);\n  const args = body instanceof Array ? body : [];\n\n  if (!!packageName && !!serviceName && !!methodName && !methodNameIsPrivate) {\n    const servicePath = [\n      DEP_NAMES.PACKAGES,\n      packageName,\n      serviceName\n    ];\n\n    let serviceInstance = {};\n\n    try {\n      serviceInstance = await inc.getResolvedPathAsync(servicePath, dependencyResolutionTimeoutMS);\n    } catch (error) {\n      const {\n        message,\n        data,\n        error: directError,\n        source: {\n          error: {\n            message: sourceMessage\n          } = {},\n          path,\n          causePath\n        } = {}\n      } = error || {};\n      const responseData = error instanceof ServiceResponse ?\n        error :\n        (\n          directError instanceof ServiceResponse ?\n            directError :\n            {\n              message,\n              data,\n              source: {\n                message: sourceMessage,\n                path,\n                causePath\n              }\n            }\n        );\n      const {statusCode = 500} = responseData;\n\n      return getResponseWithCORS(statusCode, responseData);\n    }\n\n    const camelCaseMethodName = toCamelCase(methodName);\n    const {[camelCaseMethodName]: serviceMethod} = serviceInstance;\n\n    if (serviceMethod instanceof Function) {\n      try {\n        const returnValue = await serviceMethod(...args);\n        const returnValueAsObject = returnValue instanceof Object ? returnValue : {};\n        const {statusCode = 200} = returnValueAsObject;\n\n        return getResponseWithCORS(statusCode, returnValue);\n      } catch (error) {\n        const errorAsObject = error instanceof Object ? error : {};\n        const {statusCode = 500} = errorAsObject;\n\n        return getResponseWithCORS(statusCode, error);\n      }\n    } else {\n      return getResponseWithCORS(404, {message: 'Not Found'});\n    }\n  } else {\n    return getResponseWithCORS(404, {message: 'Not Found'});\n  }\n};\n",
    "static": true,
    "longname": "/Users/ryangraff/projects/incarnate-cloud/src/Providers/Common.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 13,
    "kind": "typedef",
    "name": "AllowedOriginProcessor",
    "memberof": "src/Providers/Common.jsx",
    "static": true,
    "longname": "src/Providers/Common.jsx~AllowedOriginProcessor",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Whether or not the `incomingOrigin` is allowed."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "incomingOrigin",
        "description": "The current origin of the incoming request."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the `incomingOrigin` is allowed."
    },
    "type": {
      "types": [
        "Function"
      ],
      "optional": false,
      "name": "AllowedOriginProcessor"
    }
  },
  {
    "__docId__": 14,
    "kind": "function",
    "name": "getRequestResponse",
    "memberof": "src/Providers/Common.jsx",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Providers/Common.jsx~getRequestResponse",
    "access": "public",
    "export": true,
    "importPath": "incarnate-cloud/src/Providers/Common.jsx",
    "importStyle": "{getRequestResponse}",
    "description": "The generic request handler.",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HandlerResponse} The handler response object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The configuration object."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config.incarnateConfig",
        "description": "The incarnate configuration object."
      },
      {
        "nullable": null,
        "types": [
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "config.allowedPaths",
        "description": "A SECURITY measure to prevent access of values and methods outside of services."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "string[]",
          "RegExp",
          "RegExp[]",
          "AllowedOriginProcessor",
          "AllowedOriginProcessor[]"
        ],
        "spread": false,
        "optional": false,
        "name": "config.allowedOrigin",
        "description": "The allowed CORS origin returned to `OPTIONS` requests."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "config.dependencyResolutionTimeoutMS",
        "description": "The maximum number of milliseconds allotted for resolving service dependencies. Default: 300000 (5 minutes)"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config.event",
        "description": "The raw invocation event object."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.httpMethod",
        "description": "The HTTP method for the request. Default: POST"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config.headers",
        "description": "The HTTP headers object."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "config.multiValueHeaders",
        "description": "An optional map of HTTP headers with multiple values stored as Array values for each header name key."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.path",
        "description": "The HTTP request path."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.bodyString",
        "description": "The raw HTTP body as a string that will be parsed as JSON and expected to be an Array of arguments to the destination function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HandlerResponse"
      ],
      "spread": false,
      "description": "The handler response object."
    }
  },
  {
    "__docId__": 15,
    "kind": "file",
    "name": "src/Providers/Constants.jsx",
    "content": "/**\n * Built-in dependency names.\n * */\nexport const DEP_NAMES = {\n  INPUT: 'INPUT',\n  PACKAGES: 'PACKAGES',\n  HEADERS: 'HEADERS',\n  COOKIES: 'COOKIES',\n  PATH: 'PATH',\n  EVENT: 'EVENT',\n  CONTEXT: 'CONTEXT',\n  IDENTITY: 'IDENTITY'\n};\n\nexport const PATH_DELIMITER = '/';\n\nexport const METHODS = {\n  OPTIONS: 'OPTIONS',\n  HEAD: 'HEAD',\n  GET: 'GET',\n  POST: 'POST',\n  PUT: 'PUT',\n  PATCH: 'PATCH',\n  DELETE: 'DELETE'\n};\n",
    "static": true,
    "longname": "/Users/ryangraff/projects/incarnate-cloud/src/Providers/Constants.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 16,
    "kind": "variable",
    "name": "DEP_NAMES",
    "memberof": "src/Providers/Constants.jsx",
    "static": true,
    "longname": "src/Providers/Constants.jsx~DEP_NAMES",
    "access": "public",
    "export": true,
    "importPath": "incarnate-cloud/src/Providers/Constants.jsx",
    "importStyle": "{DEP_NAMES}",
    "description": "Built-in dependency names.",
    "lineNumber": 4,
    "type": {
      "types": [
        "{\"INPUT\": string, \"PACKAGES\": string, \"HEADERS\": string, \"COOKIES\": string, \"PATH\": string, \"EVENT\": string, \"CONTEXT\": string, \"IDENTITY\": string}"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "variable",
    "name": "PATH_DELIMITER",
    "memberof": "src/Providers/Constants.jsx",
    "static": true,
    "longname": "src/Providers/Constants.jsx~PATH_DELIMITER",
    "access": "public",
    "export": true,
    "importPath": "incarnate-cloud/src/Providers/Constants.jsx",
    "importStyle": "{PATH_DELIMITER}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 18,
    "kind": "variable",
    "name": "METHODS",
    "memberof": "src/Providers/Constants.jsx",
    "static": true,
    "longname": "src/Providers/Constants.jsx~METHODS",
    "access": "public",
    "export": true,
    "importPath": "incarnate-cloud/src/Providers/Constants.jsx",
    "importStyle": "{METHODS}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "{\"OPTIONS\": string, \"HEAD\": string, \"GET\": string, \"POST\": string, \"PUT\": string, \"PATCH\": string, \"DELETE\": string}"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "file",
    "name": "src/Providers/Google.jsx",
    "content": "import {parse as ParseURL} from 'url';\nimport {getRequestResponse} from './Common';\n\n/**\n * Create an Incarnate managed Google Cloud Function handler.\n * @param {Object} config\n * @param {Object} config.incarnateConfig The incarnate configuration object.\n * @param {Array.<string>} config.allowedPaths A SECURITY measure to prevent access of values and methods outside of services.\n * @param {string|string[]|RegExp|RegExp[]|AllowedOriginProcessor|AllowedOriginProcessor[]} config.allowedOrigin The allowed CORS origin returned to `OPTIONS` requests.\n * @param {number} config.dependencyResolutionTimeoutMS The maximum number of milliseconds allotted for resolving service dependencies. Default: 300000 (5 minutes)\n *\n * @returns {Function} The Google Cloud Function handler.\n * */\nexport default ({\n                  incarnateConfig = {},\n                  allowedPaths = [],\n                  allowedOrigin = '',\n                  dependencyResolutionTimeoutMS = 300000\n                } = {}) => {\n  return async (req = {}, res) => {\n    const {\n      method: httpMethod = 'POST',\n      headers = {},\n      url = '',\n      rawBody: bodyString = '[]'\n    } = req;\n    const {\n      pathname: path = ''\n    } = ParseURL(url);\n    const {\n      statusCode = 200,\n      headers: responseHeaders = {},\n      body = ''\n    } = await getRequestResponse({\n      incarnateConfig,\n      allowedPaths,\n      allowedOrigin,\n      dependencyResolutionTimeoutMS,\n      event: req,\n      httpMethod,\n      headers,\n      multiValueHeaders: {},\n      path,\n      bodyString\n    });\n\n    // Set each header on the response.\n    Object\n      .keys(responseHeaders)\n      .forEach(k => res.set(k, responseHeaders[k]));\n\n    res\n      .status(statusCode)\n      .send(body);\n  }\n};\n",
    "static": true,
    "longname": "/Users/ryangraff/projects/incarnate-cloud/src/Providers/Google.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 20,
    "kind": "function",
    "name": "Google",
    "memberof": "src/Providers/Google.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Providers/Google.jsx~Google",
    "access": "public",
    "export": true,
    "importPath": "incarnate-cloud/src/Providers/Google.jsx",
    "importStyle": "Google",
    "description": "Create an Incarnate managed Google Cloud Function handler.",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} The Google Cloud Function handler."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config.incarnateConfig",
        "description": "The incarnate configuration object."
      },
      {
        "nullable": null,
        "types": [
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "config.allowedPaths",
        "description": "A SECURITY measure to prevent access of values and methods outside of services."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "string[]",
          "RegExp",
          "RegExp[]",
          "AllowedOriginProcessor",
          "AllowedOriginProcessor[]"
        ],
        "spread": false,
        "optional": false,
        "name": "config.allowedOrigin",
        "description": "The allowed CORS origin returned to `OPTIONS` requests."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "config.dependencyResolutionTimeoutMS",
        "description": "The maximum number of milliseconds allotted for resolving service dependencies. Default: 300000 (5 minutes)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "The Google Cloud Function handler."
    }
  },
  {
    "__docId__": 21,
    "kind": "file",
    "name": "src/Providers/Utils.jsx",
    "content": "/**\n * @typedef {Object} HandlerResponse\n * @property {number|string} statusCode The response HTTP status code.\n * @property {Object} headers The headers object.\n * @property {string} body A JSON string representing the return value of a function.\n * */\n\n// SECURITY: Don't call private methods on services.\nimport {PATH_DELIMITER} from './Constants';\nimport ServiceResponse from '../Utils/ServiceResponse';\n\nconst CLEAN_CONTENT_TYPE_HEADER_NAME = 'content-type';\nconst JSON_CONTENT_TYPE = 'application/json';\n\nexport const getMethodNameIsPrivate = (methodName = '') => methodName.charAt(0) === '_';\n\nexport const getCleanPathParts = (path = '') => path\n  .split(PATH_DELIMITER)\n  .filter(p => !!p);\n\n/**\n * @returns {HandlerResponse} The handler response object.\n * */\nexport const getResponse = (statusCode = 200, value = undefined, headers = {}) => {\n  const baseHeaders = typeof value === 'undefined' ? {...headers} : {'Content-Type': 'application/json', ...headers};\n  const {\n    headers: valueHeaders = {},\n    other: valueOtherProperties = {}\n  } = (value instanceof ServiceResponse ? value : {});\n  const mergedHeaders = {\n    ...baseHeaders,\n    ...valueHeaders\n  };\n  const contentType = Object\n    .keys(mergedHeaders)\n    .reduce((acc, k) => {\n      if (typeof acc !== 'undefined') {\n        return acc;\n      } else {\n        const cleanKey = `${k}`.toLowerCase();\n\n        if (cleanKey === CLEAN_CONTENT_TYPE_HEADER_NAME) {\n          return mergedHeaders[k];\n        } else {\n          return undefined;\n        }\n      }\n    }, undefined);\n  const contentIsJSON = typeof contentType === 'string' && contentType.indexOf(JSON_CONTENT_TYPE) !== -1;\n\n  return {\n    statusCode,\n    headers: mergedHeaders,\n    body: typeof value === 'undefined' ?\n      '' :\n      (\n        !!contentIsJSON ?\n          // Content is JSON.\n          JSON.stringify(value, null, '  ') :\n          // Content is NOT JSON.\n          value\n      ),\n    ...valueOtherProperties\n  };\n};\n\nexport const getCORSHeaders = (clientOrigin = '', currentOrigin = '') => {\n  const originProcessors = clientOrigin instanceof Array ? clientOrigin : [clientOrigin];\n  const validOrigin = originProcessors\n    .reduce((acc, o) => {\n      if (!!acc) {\n        return acc;\n      } else if (o instanceof RegExp) {\n        return !!o.test(currentOrigin) ? currentOrigin : '';\n      } else if (o instanceof Function) {\n        return !!o(currentOrigin) ? currentOrigin : '';\n      } else {\n        return o === currentOrigin ? o : '';\n      }\n    }, '');\n\n  return {\n    'Access-Control-Allow-Origin': validOrigin,\n    'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization',\n    'Access-Control-Allow-Methods': 'OPTIONS, HEAD, GET, POST, PUT, PATCH, DELETE',\n    'Access-Control-Allow-Credentials': 'true'\n  }\n};\n\nexport const getCleanHttpMethod = (method = 'POST') => `${method}`.toUpperCase();\n",
    "static": true,
    "longname": "/Users/ryangraff/projects/incarnate-cloud/src/Providers/Utils.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 22,
    "kind": "typedef",
    "name": "HandlerResponse",
    "memberof": "src/Providers/Utils.jsx",
    "static": true,
    "longname": "src/Providers/Utils.jsx~HandlerResponse",
    "access": "public",
    "description": "",
    "lineNumber": 9,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "statusCode",
        "description": "The response HTTP status code."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "headers",
        "description": "The headers object."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "A JSON string representing the return value of a function."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "HandlerResponse"
    }
  },
  {
    "__docId__": 23,
    "kind": "variable",
    "name": "CLEAN_CONTENT_TYPE_HEADER_NAME",
    "memberof": "src/Providers/Utils.jsx",
    "static": true,
    "longname": "src/Providers/Utils.jsx~CLEAN_CONTENT_TYPE_HEADER_NAME",
    "access": "public",
    "export": false,
    "importPath": "incarnate-cloud/src/Providers/Utils.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 24,
    "kind": "variable",
    "name": "JSON_CONTENT_TYPE",
    "memberof": "src/Providers/Utils.jsx",
    "static": true,
    "longname": "src/Providers/Utils.jsx~JSON_CONTENT_TYPE",
    "access": "public",
    "export": false,
    "importPath": "incarnate-cloud/src/Providers/Utils.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 25,
    "kind": "function",
    "name": "getMethodNameIsPrivate",
    "memberof": "src/Providers/Utils.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Providers/Utils.jsx~getMethodNameIsPrivate",
    "access": "public",
    "export": true,
    "importPath": "incarnate-cloud/src/Providers/Utils.jsx",
    "importStyle": "{getMethodNameIsPrivate}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "methodName",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 26,
    "kind": "function",
    "name": "getCleanPathParts",
    "memberof": "src/Providers/Utils.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Providers/Utils.jsx~getCleanPathParts",
    "access": "public",
    "export": true,
    "importPath": "incarnate-cloud/src/Providers/Utils.jsx",
    "importStyle": "{getCleanPathParts}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 27,
    "kind": "function",
    "name": "getResponse",
    "memberof": "src/Providers/Utils.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Providers/Utils.jsx~getResponse",
    "access": "public",
    "export": true,
    "importPath": "incarnate-cloud/src/Providers/Utils.jsx",
    "importStyle": "{getResponse}",
    "description": "",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HandlerResponse} The handler response object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HandlerResponse"
      ],
      "spread": false,
      "description": "The handler response object."
    },
    "params": [
      {
        "name": "statusCode",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 200,
        "defaultValue": "200"
      },
      {
        "name": "value",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "undefined",
        "defaultValue": "undefined"
      },
      {
        "name": "headers",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ]
  },
  {
    "__docId__": 28,
    "kind": "function",
    "name": "getCORSHeaders",
    "memberof": "src/Providers/Utils.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Providers/Utils.jsx~getCORSHeaders",
    "access": "public",
    "export": true,
    "importPath": "incarnate-cloud/src/Providers/Utils.jsx",
    "importStyle": "{getCORSHeaders}",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "clientOrigin",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      },
      {
        "name": "currentOrigin",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      }
    ],
    "return": {
      "types": [
        "{\"Access-Control-Allow-Origin\": *, \"Access-Control-Allow-Headers\": string, \"Access-Control-Allow-Methods\": string, \"Access-Control-Allow-Credentials\": string}"
      ]
    }
  },
  {
    "__docId__": 29,
    "kind": "function",
    "name": "getCleanHttpMethod",
    "memberof": "src/Providers/Utils.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Providers/Utils.jsx~getCleanHttpMethod",
    "access": "public",
    "export": true,
    "importPath": "incarnate-cloud/src/Providers/Utils.jsx",
    "importStyle": "{getCleanHttpMethod}",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "method",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "POST",
        "defaultValue": "POST"
      }
    ],
    "return": null
  },
  {
    "__docId__": 30,
    "kind": "file",
    "name": "src/Utils/ServiceResponse.jsx",
    "content": "export default class ServiceResponse {\n  /**\n   * @type {number}\n   * */\n  statusCode = 400;\n\n  /**\n   * @type {*}\n   * */\n  data;\n\n  /**\n   * @type {Object.<string>}\n   * */\n  headers;\n\n  /**\n   * @type {Object}\n   * */\n  other;\n\n  constructor(statusCode = 400, data, headers = {}, other = {}) {\n    this.statusCode = statusCode;\n    this.data = data;\n    this.headers = headers;\n    this.other = other;\n  }\n\n  toJSON = () => this.data;\n}\n",
    "static": true,
    "longname": "/Users/ryangraff/projects/incarnate-cloud/src/Utils/ServiceResponse.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 31,
    "kind": "class",
    "name": "ServiceResponse",
    "memberof": "src/Utils/ServiceResponse.jsx",
    "static": true,
    "longname": "src/Utils/ServiceResponse.jsx~ServiceResponse",
    "access": "public",
    "export": true,
    "importPath": "incarnate-cloud/src/Utils/ServiceResponse.jsx",
    "importStyle": "ServiceResponse",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 32,
    "kind": "member",
    "name": "statusCode",
    "memberof": "src/Utils/ServiceResponse.jsx~ServiceResponse",
    "static": false,
    "longname": "src/Utils/ServiceResponse.jsx~ServiceResponse#statusCode",
    "access": "public",
    "description": "",
    "lineNumber": 5,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 33,
    "kind": "member",
    "name": "data",
    "memberof": "src/Utils/ServiceResponse.jsx~ServiceResponse",
    "static": false,
    "longname": "src/Utils/ServiceResponse.jsx~ServiceResponse#data",
    "access": "public",
    "description": "",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 34,
    "kind": "member",
    "name": "headers",
    "memberof": "src/Utils/ServiceResponse.jsx~ServiceResponse",
    "static": false,
    "longname": "src/Utils/ServiceResponse.jsx~ServiceResponse#headers",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "Object.<string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 35,
    "kind": "member",
    "name": "other",
    "memberof": "src/Utils/ServiceResponse.jsx~ServiceResponse",
    "static": false,
    "longname": "src/Utils/ServiceResponse.jsx~ServiceResponse#other",
    "access": "public",
    "description": "",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 36,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Utils/ServiceResponse.jsx~ServiceResponse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/ServiceResponse.jsx~ServiceResponse#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true
  },
  {
    "__docId__": 41,
    "kind": "member",
    "name": "toJSON",
    "memberof": "src/Utils/ServiceResponse.jsx~ServiceResponse",
    "static": false,
    "longname": "src/Utils/ServiceResponse.jsx~ServiceResponse#toJSON",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "file",
    "name": "src/index.jsx",
    "content": "import AWSConfigLoaderInternal from './Providers/AWS/ConfigLoader';\nimport AWSInternal from './Providers/AWS';\nimport GoogleInternal from './Providers/Google';\nimport ServiceResponseInternal from './Utils/ServiceResponse';\nimport {DEP_NAMES as DEP_NAMES_INTERNAL} from './Providers/Constants';\n\nexport const DEP_NAMES = DEP_NAMES_INTERNAL;\n\nexport const ServiceResponse = ServiceResponseInternal;\n\nexport const AWSConfigLoader = AWSConfigLoaderInternal;\nexport const AWS = AWSInternal;\nexport const Google = GoogleInternal;\n",
    "static": true,
    "longname": "/Users/ryangraff/projects/incarnate-cloud/src/index.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 43,
    "kind": "variable",
    "name": "DEP_NAMES",
    "memberof": "src/index.jsx",
    "static": true,
    "longname": "src/index.jsx~DEP_NAMES",
    "access": "public",
    "export": true,
    "importPath": "incarnate-cloud",
    "importStyle": "{DEP_NAMES}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "variable",
    "name": "ServiceResponse",
    "memberof": "src/index.jsx",
    "static": true,
    "longname": "src/index.jsx~ServiceResponse",
    "access": "public",
    "export": true,
    "importPath": "incarnate-cloud",
    "importStyle": "{ServiceResponse}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 45,
    "kind": "variable",
    "name": "AWSConfigLoader",
    "memberof": "src/index.jsx",
    "static": true,
    "longname": "src/index.jsx~AWSConfigLoader",
    "access": "public",
    "export": true,
    "importPath": "incarnate-cloud",
    "importStyle": "{AWSConfigLoader}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 46,
    "kind": "variable",
    "name": "AWS",
    "memberof": "src/index.jsx",
    "static": true,
    "longname": "src/index.jsx~AWS",
    "access": "public",
    "export": true,
    "importPath": "incarnate-cloud",
    "importStyle": "{AWS}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 47,
    "kind": "variable",
    "name": "Google",
    "memberof": "src/index.jsx",
    "static": true,
    "longname": "src/index.jsx~Google",
    "access": "public",
    "export": true,
    "importPath": "incarnate-cloud",
    "importStyle": "{Google}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "![Incarnate Logo](/Header.jpg?raw=true \"Incarnate\")\n\n# Incarnate Cloud\n\nCloud Function Middleware for [Incarnate](http://incarnate.resist.design)\n\n## Install\n\n`npm i -S incarnate-cloud`\n\n## API Docs\n\nhttp://cloud.incarnate.resist.design\n\n## Usage\n\n```js\nimport {AWS} from 'incarnate-cloud';\n\nmodule.exports = {\n  handler: AWS(\n    {\n      subMap: {\n        package: {\n          subMap: {\n            service: {\n              factory: () => {\n                return {\n                  method: async arg1 => `Received: ${arg1}`\n                };\n              }\n            }\n          }\n        }\n      }\n    },\n    [\n      '/package/service/method'\n    ],\n    'https://example.com'\n  )\n};\n```\n",
    "longname": "/Users/ryangraff/projects/incarnate-cloud/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  }
]